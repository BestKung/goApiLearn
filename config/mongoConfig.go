package config

import (
	"context"
	"fmt"
	"log"
	"time"

	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

var db *mongo.Client

func InitMongo(connection string) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
	db, err := mongo.Connect(ctx, options.Client().ApplyURI(connection))

	fmt.Printf("db : %T", db)

	if err != nil {
		log.Fatal(err)
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
	err = db.Ping(ctx, nil)
	if err != nil {
		log.Fatal("‚ùå Connect MongoDB failed:", err)
	}

	fmt.Println("‚úÖ Connected to MongoDB!")

	// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Database ‡πÅ‡∏•‡∏∞ Collection
	collection := db.Database("myshop").Collection("myshop")
	fmt.Println(collection)

	insertResult, err := collection.InsertOne(ctx, map[string]interface{}{
		"name":  "Best",
		"email": "best@example.com",
		"age":   25,
	})
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("üü¢ Inserted ID:", insertResult.InsertedID)

	var result map[string]interface{}
	err = collection.FindOne(ctx, map[string]interface{}{"name": "Best"}).Decode(&result)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("üîç Found document:", result)
}
